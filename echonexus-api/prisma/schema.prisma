generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(uuid())
  email              String    @unique
  supabaseUserId     String    @unique
  displayName        String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())
  clientCreated      Client[]  @relation(name: "createdByUser")
  project            Project[]
  clientsWhereMember Client[]  @relation(name: "membersOfClient")
  clientsWhereAdmin  Client[]  @relation(name: "adminsOfClient")
  clientId           String?
}

model Client {
  id            String      @id @default(uuid())
  displayName   String
  paymentPlan   PaymentPlan @relation(fields: [paymentPlanId], references: [id], onUpdate: Cascade)
  createdBy     User        @relation(fields: [userId], references: [id], name: "createdByUser")
  members       User[]      @relation(name: "membersOfClient")
  admins        User[]      @relation(name: "adminsOfClient")
  projects      Project[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  userId        String
  paymentPlanId String
}

model PaymentPlan {
  id                   String   @id @default(uuid())
  name                 String
  description          String
  monthlyPrice         String
  features             String[]
  tag                  String?
  sortIndex            Int      @default(0)
  stripePricingTableId String
  stripePublishableKey String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @default(now())
  clients              Client[]
}

model Project {
  id                       String      @id @default(uuid())
  name                     String
  createdAt                DateTime    @default(now())
  updatedAt                DateTime    @default(now())
  createdBy                User        @relation(fields: [userId], references: [id])
  isBugReportsEnabled      Boolean     @default(true)
  isFeatureRequestsEnabled Boolean     @default(true)
  isFeatureFeedbackEnabled Boolean     @default(true)
  hostnames                Hostname[]
  subdomains               Subdomain[]
  client                   Client?     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId                 String?
  userId                   String
  product                  Product?
  productId                String?
}

model Subdomain {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  subdomain String   @unique
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}

model Hostname {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  hostname  String   @unique
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}

model Product {
  id                        String                      @id @default(uuid())
  createdAt                 DateTime                    @default(now())
  updatedAt                 DateTime                    @default(now())
  project                   Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId                 String                      @unique
  ProductFeedbackSubmission ProductFeedbackSubmission[]
}

enum ProductFeedbackSubmissionType {
  BUG_REPORT
  FEATURE_REQUEST
  FEATURE_FEEDBACK
}

model ProductFeedbackSubmission {
  id                     String                        @id @default(uuid())
  createdAt              DateTime                      @default(now())
  updatedAt              DateTime                      @default(now())
  product                Product                       @relation(fields: [productId], references: [id])
  productId              String
  clientIp               String
  clientSubdomain        String
  widgetMetadataType     ProductFeedbackSubmissionType
  widgetMetadataUrl      String
  widgetMetadataTimezone String
  submittedAt            DateTime
  userFeedback           String
}
